----------------------------------------
---------   Assignment 12   ------------
----------------------------------------

---------------------------
------------ 1 ------------

-- Database Retreived --

---------------------------
------------ 2 ------------

-- See below --

---------------------------
------------ 3 ------------
CREATE TABLE CUSTOMERDIM (
Cust_id int PRIMARY KEY,
Cust_LName varchar(30),
Cust_FName varchar(30),
Cust_Initial varchar(1),
Cust_AreaCode varchar(3),
Cust_Phone varchar(7),
Cust_Balance INT)
 
CREATE TABLE MODELDIM (
Mod_Code varchar(10) PRIMARY KEY,
Mod_Manufacturer varchar(15),
Mod_Name varchar(30),
Mod_Seats float(8),
Mod_Chg_mile numeric)
 
CREATE TABLE PILOTDIM (
Emp_id int PRIMARY KEY,
Pil_License varchar(25),
Pil_ratings varchar(30),
Pil_Med_type varchar(1),
Pil_Med_date datetime,
Pil_Pt135_date datetime)

CREATE TABLE TIMEDIM (
Time_id INT IDENTITY PRIMARY KEY,
Inv_Date DATETIME NULL,
Inv_Month INT NULL,
Inv_Day INT NULL,
Inv_Year INT NULL)

CREATE TABLE CHARTERDIM(
CHAR_TRIP int,
CHAR_DATE datetime,
CHAR_PILOT int,
CHAR_DESTINATION varchar(3),
CHAR_DISTANCE float(8),
CHAR_HOURS_FLOWN float(8),
CHAR_HOURS_WAIT float(8),
CHAR_FUEL_GALLONS float(8),
CHAR_OIL_QTS int,
CUS_CODE int)
 
CREATE TABLE FACT (
_Cust_id INT NOT NULL,
_Mod_Code varchar(10) NOT NULL,
_Pil_id INT NOT NULL,
_Time_id INT NOT NULL,
_Chart_ID INT NOT NULL,
_HOURS_FLOWN float(8),
_FUEL_GALLONS float(8),
TOT_REVENUE Decimal)
 
ALTER TABLE FACT
ADD CONSTRAINT FK_FACT_CUST FOREIGN KEY(_Cust_id) REFERENCES CUSTOMERDIM,
CONSTRAINT FK_FACT_MOD FOREIGN KEY(_Mod_Code) REFERENCES MODELDIM,
CONSTRAINT FK_FACT_PIL FOREIGN KEY(_Pil_id) REFERENCES PILOTDIM,
CONSTRAINT FK_FACT_CHART FOREIGN KEY(_Chart_ID) REFERENCES CHARTERDIM,
CONSTRAINT FK_FACT_TIME FOREIGN KEY(_Time_id) REFERENCES TIMEDIM
 
INSERT INTO CUSTOMERDIM
SELECT * FROM CUSTOMER3
 
INSERT INTO MODELDIM
SELECT * FROM   MODEL
 
INSERT INTO PILOTDIM
SELECT * FROM PILOT

INSERT INTO CHARTERDIM
SELECT CHAR_TRIP,
		CHAR_DATE,
		CHAR_PILOT,
		CHAR_DESTINATION,
		CHAR_DISTANCE,
		CHAR_HOURS_FLOWN,
		CHAR_HOURS_WAIT,
		CHAR_FUEL_GALLONS,
		CHAR_OIL_QTS,
		CUS_CODE
FROM CHARTER
 
INSERT INTO TIMEDIM
SELECT  CHAR_DATE, MONTH(CHAR_DATE), DAY(CHAR_DATE), YEAR(CHAR_DATE)
FROM   CHARTER

---------------------------
------------ 4 ------------
USE [CIS31009]
GO
CREATE PROCEDURE sp_A12
AS
BEGIN
	SET NOCOUNT ON;

--Remove Dependencies--
ALTER TABLE FACT DROP CONSTRAINT FK_FACT_CUST
ALTER TABLE FACT DROP CONSTRAINT FK_FACT_PIL
ALTER TABLE FACT DROP CONSTRAINT FK_FACT_TIME
ALTER TABLE FACT DROP CONSTRAINT FK_FACT_MOD

ALTER TABLE CUSTOMERDIM NOCHECK CONSTRAINT sp_A12
ALTER TABLE PILOTDIM NOCHECK CONSTRAINT sp_A12
ALTER TABLE TIMEDIM NOCHECK CONSTRAINT sp_A12
ALTER TABLE MODELDIM NOCHECK CONSTRAINT sp_A12

--Clear Tables--
TRUNCATE TABLE PILOTDIM
TRUNCATE TABLE CUSTOMERDIM
TRUNCATE TABLE TIMEDIM
TRUNCATE TABLE MODELDIM
TRUNCATE TABLE FACT

--TURN ON CONSTRAINTS AGAIN
ALTER TABLE PILOTDIM CHECK CONSTRAINT sp_A12
ALTER TABLE CUSTOMERDIM CHECK CONSTRAINT sp_A12
ALTER TABLE TIMEDIM CHECK CONSTRAINT sp_A12
ALTER TABLE MODELDIM CHECK CONSTRAINT sp_A12
ALTER TABLE FACT CHECK CONSTRAINT sp_A12
ALTER TABLE FACT ADD CONSTRAINT [FK_PILOT] FOREIGN KEY(_Pil_id) REFERENCES PILOTDIM,
					CONSTRAINT [FK_CUSTOMER] FOREIGN KEY(_Cust_id) REFERENCES CUSTOMERDIM,
					CONSTRAINT [FK_TIME] FOREIGN KEY(_Time_id) REFERENCES TIMEDIM,
					CONSTRAINT [FK_MODEL] FOREIGN KEY(_Mod_Code) REFERENCES MODELDIM

CREATE TABLE #Temp (CUS_CODE INT,
					PILOTID INT,
					MOD_CODE VARCHAR(10),
					TIMEID INT,
					CHARTER_DATE DATETIME,
					CHART_ID INT,
					DISTANCE FLOAT,
					HOURS_FLOWN FLOAT,
					FUEL_GALLONS FLOAT,
					OIL_QTS	FLOAT,
					MOD_CHG_MILE FLOAT)


--INSERTS TRANSACTIONAL DATA INTO STAGETABLE
INSERT INTO #Temp(CUS_CODE, PILOTID, MOD_CODE, TIMEID, CHARTER_DATE, DISTANCE, HOURS_FLOWN, FUEL_GALLONS, OIL_QTS, MOD_CHG_MILE)
SELECT CH.CHAR_DISTANCE, CH.CHAR_HOURS_FLOWN, CH.CHAR_FUEL_GALLONS, CH.CHAR_OIL_QTS, CH.CUS_CODE, CH.CHAR_DATE, M.MOD_CODE, P.EMP_NUM, M.MOD_CHG_MILE
FROM CUSTOMER3 C3 INNER JOIN CHARTER CH ON C3.CUS_CODE = CH.CUS_CODE
	 INNER JOIN AIRCRAFT A ON CH.AC_NUMBER = A.AC_NUMBER
	 INNER JOIN MODEL M ON A.MOD_CODE = M.MOD_CODE
	 INNER JOIN PILOT P ON CH.CHAR_PILOT = P.EMP_NUM

-- Update stagetable to assign datawarehouse keys
UPDATE #Temp
SET PILOTID = P.Emp_id
FROM #Temp TP 
INNER JOIN PILOTDIM P ON TP.PILOTID = P.Emp_id

UPDATE #Temp
SET CUS_CODE = C.Cust_id
FROM #Temp TP 
INNER JOIN CUSTOMERDIM C ON TP.CUS_CODE = C.Cust_id

UPDATE #Temp
SET TIMEID = T.Time_id
FROM #Temp TP 
INNER JOIN TIMEDIM T ON TP.CHARTER_DATE = T.Inv_Date

UPDATE #Temp
SET MOD_CODE = M.Mod_Code
FROM #Temp TP 
INNER JOIN MODELDIM M ON TP.MOD_CODE = M.MOD_CODE

--Populate fact
INSERT INTO FACT
SELECT CUS_CODE, MOD_CODE, PILOTID, TIMEID, CHART_ID, HOURS_FLOWN, FUEL_GALLONS, (DISTANCE * MOD_CHG_MILE)
FROM #Temp

END


----------------------
--- Book Questions ---
-------
-- 5 --
SELECT DC.CUS_CODE, P_CODE, SUM(SALE_UNITS * SALE_PRICE) AS TOTSALES
FROM DWDAYSALESFACT DDSF INNER JOIN DWCUSTOMER DC ON DDSF.CUS_CODE = DC.CUS_CODE
GROUP BY ROLLUP(DC.CUS_CODE, P_CODE)
ORDER BY DC.CUS_CODE, P_CODE

-------
-- 6 --
SELECT	DC.CUS_CODE, TM_MONTH, P_CODE, SUM(SALE_UNITS*SALE_PRICE) AS TOTSALES
FROM	DWDAYSALESFACT DDSF INNER JOIN DWCUSTOMER DC ON DDSF.CUS_CODE = DC.CUS_CODE
	INNER JOIN DWTIME DT ON DDSF.TM_ID = DT.TM_ID
GROUP BY	ROLLUP(DC.CUS_CODE, TM_MONTH, P_CODE)
ORDER BY	DC.CUS_CODE, TM_MONTH, P_CODE;

-------
-- 7 --
SELECT	DC.REG_ID, DC.CUS_CODE, SUM(SALE_UNITS*SALE_PRICE) AS TOTSALES
FROM DWDAYSALESFACT DDSF INNER JOIN DWCUSTOMER DC ON DDSF.CUS_CODE = DC.CUS_CODE
 JOIN DWREGION DR ON DR.REG_ID = DC.REG_ID
GROUP BY	ROLLUP(DC.REG_ID, DC.CUS_CODE)
ORDER BY	DC.REG_ID, DC.CUS_CODE;

-------
-- 8 --
SELECT	TM_MONTH, P_CATEGORY, SUM(SALE_UNITS * SALE_PRICE) 
	AS TotSales
FROM	DWDAYSALESFACT DDSF JOIN DWPRODUCT DP ON DDSF.P_CODE = DP.P_CODE
	JOIN DWTIME DT ON DT.TM_ID = DDSF.TM_ID
GROUP BY	ROLLUP(TM_MONTH, P_CATEGORY)
ORDER BY	TM_MONTH, P_CATEGORY;

--------
-- 10 --
SELECT	TM_MONTH, P_CATEGORY, COUNT(*) AS NUMPROD, 
	SUM(SALE_UNITS*SALE_PRICE) AS TOTSALES
FROM	DWDAYSALESFACT DDSF JOIN DWPRODUCT DP ON DP.P_CODE = DDSF.P_CODE
		JOIN DWTIME DT ON DT.TM_ID = DDSF.TM_ID
GROUP BY	ROLLUP(TM_MONTH, P_CATEGORY)
ORDER BY	TM_MONTH, P_CATEGORY;

--------
-- 12 --
SELECT	TM_MONTH, P_CATEGORY, COUNT(*), SUM(SALE_UNITS*SALE_PRICE)
FROM	DWDAYSALESFACT DDSF JOIN DWPRODUCT DP ON DDSF.CUS_CODE
 JOIN DWTIME DT 
GROUP BY	CUBE (TM_MONTH, P_CATEGORY)
ORDER BY	TM_MONTH, P_CATEGORY;
